import React, { useState, useEffect } from 'react';
import { Shield, Search, Filter, Play, CheckCircle, AlertTriangle, Info, Star, Target, Settings } from 'lucide-react';

const ExploitManager = () => {
  const [exploits, setExploits] = useState([
    {
      id: 1,
      name: 'EternalBlue SMB RCE',
      cve: 'CVE-2017-0144',
      description: 'Remote code execution in Microsoft SMBv1 servers',
      severity: 'Critical',
      platforms: ['Windows'],
      services: ['SMB'],
      difficulty: 'Easy',
      reliability: 'Excellent',
      author: 'Shadow Brokers / CypherFramework',
      verified: true,
      rating: 4.9,
      targets: 1247,
      module_name: 'eternalblue_ms17_010'
    },
    {
      id: 2,
      name: 'Log4Shell RCE',
      cve: 'CVE-2021-44228',
      description: 'Remote code execution via Apache Log4j JNDI features',
      severity: 'Critical',
      platforms: ['Linux', 'Windows', 'macOS'],
      services: ['HTTP', 'HTTPS'],
      difficulty: 'Normal',
      reliability: 'Excellent',
      author: 'CypherFramework Team',
      verified: true,
      rating: 4.8,
      targets: 892,
      module_name: 'log4shell_cve_2021_44228'
    },
    {
      id: 3,
      name: 'Confluence OGNL Injection',
      cve: 'CVE-2022-26134',
      description: 'OGNL injection vulnerability in Atlassian Confluence',
      severity: 'Critical',
      platforms: ['Linux', 'Windows'],
      services: ['HTTP', 'HTTPS'],
      difficulty: 'Normal',
      reliability: 'Good',
      author: 'Security Research Team',
      verified: true,
      rating: 4.6,
      targets: 156,
      module_name: 'confluence_cve_2022_26134'
    },
    {
      id: 4,
      name: 'Microsoft Exchange ProxyShell',
      cve: 'CVE-2021-34473',
      description: 'Remote code execution in Microsoft Exchange Server',
      severity: 'Critical',
      platforms: ['Windows'],
      services: ['HTTP', 'HTTPS'],
      difficulty: 'Hard',
      reliability: 'Good',
      author: 'Orange Tsai / CypherFramework',
      verified: true,
      rating: 4.5,
      targets: 78,
      module_name: 'exchange_proxyshell'
    },
    {
      id: 5,
      name: 'Spring4Shell RCE',
      cve: 'CVE-2022-22965',
      description: 'Remote code execution in Spring Framework',
      severity: 'High',
      platforms: ['Linux', 'Windows'],
      services: ['HTTP', 'HTTPS'],
      difficulty: 'Normal',
      reliability: 'Average',
      author: 'CypherFramework Team',
      verified: false,
      rating: 4.2,
      targets: 234,
      module_name: 'spring4shell_rce'
    }
  ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('All');
  const [selectedPlatform, setSelectedPlatform] = useState('All');
  const [selectedExploit, setSelectedExploit] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  const [showRunDialog, setShowRunDialog] = useState(false);
  const [exploitOptions, setExploitOptions] = useState({});
  const [isRunning, setIsRunning] = useState(false);

  const filteredExploits = exploits.filter(exploit => {
    const matchesSearch = exploit.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         exploit.cve.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         exploit.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesSeverity = selectedSeverity === 'All' || exploit.severity === selectedSeverity;
    const matchesPlatform = selectedPlatform === 'All' || exploit.platforms.includes(selectedPlatform);
    
    return matchesSearch && matchesSeverity && matchesPlatform;
  });

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical': return 'text-red-400 bg-red-500/20 border-red-500/50';
      case 'High': return 'text-orange-400 bg-orange-500/20 border-orange-500/50';
      case 'Medium': return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/50';
      case 'Low': return 'text-green-400 bg-green-500/20 border-green-500/50';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/50';
    }
  };

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'Easy': return 'text-green-400';
      case 'Normal': return 'text-yellow-400';
      case 'Hard': return 'text-orange-400';
      case 'Expert': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getReliabilityColor = (reliability) => {
    switch (reliability) {
      case 'Excellent': return 'text-green-400';
      case 'Good': return 'text-blue-400';
      case 'Average': return 'text-yellow-400';
      case 'Poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const handleExploitSelect = (exploit) => {
    setSelectedExploit(exploit);
    setShowDetails(true);
  };

  const handleRunExploit = (exploit) => {
    setSelectedExploit(exploit);
    // Set default options based on exploit type
    const defaultOptions = getDefaultOptions(exploit);
    setExploitOptions(defaultOptions);
    setShowRunDialog(true);
  };
  
  const getDefaultOptions = (exploit) => {
    const baseOptions = {
      RHOSTS: '',
      RPORT: 80,
      TIMEOUT: 30
    };
    
    if (exploit.cve === 'CVE-2017-0144') {
      return {
        ...baseOptions,
        RPORT: 445,
        LHOST: '',
        LPORT: 4444
      };
    } else if (exploit.cve === 'CVE-2021-44228') {
      return {
        ...baseOptions,
        RPORT: 8080,
        TARGETURI: '/',
        LHOST: '',
        LPORT: 1389
      };
    } else if (exploit.cve === 'CVE-2022-26134') {
      return {
        ...baseOptions,
        RPORT: 8090,
        TARGETURI: '/',
        CMD: 'id'
      };
    }
    
    return baseOptions;
  };
  
  const executeExploit = async () => {
    if (!selectedExploit) return;
    
    setIsRunning(true);
    
    try {
      const response = await fetch('/api/modules/execute', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          module_name: selectedExploit.module_name,
          options: exploitOptions
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(`Exploit executed successfully!\nTarget: ${exploitOptions.RHOSTS}\nResult: ${JSON.stringify(result.result, null, 2)}`);
      } else {
        alert(`Exploit failed: ${result.error}`);
      }
    } catch (error) {
      alert(`Error executing exploit: ${error.message}`);
    }
    
    setIsRunning(false);
    setShowRunDialog(false);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="border-b border-gray-700 pb-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-green-400">Exploit Manager</h1>
            <p className="text-gray-400 mt-1">Browse and execute verified exploits against discovered vulnerabilities</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="text-right">
              <div className="text-sm text-gray-400">Total Exploits</div>
              <div className="text-green-400 font-bold text-xl">{exploits.length}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <div className="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4">
          {/* Search */}
          <div className="flex-1 relative">
            <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
            <input
              type="text"
              placeholder="Search exploits by name, CVE, or description..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 bg-gray-900 border border-gray-600 rounded-lg text-gray-300 placeholder-gray-500 focus:border-green-500 focus:outline-none"
            />
          </div>

          {/* Filters */}
          <div className="flex space-x-4">
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value)}
              className="px-4 py-2 bg-gray-900 border border-gray-600 rounded-lg text-gray-300 focus:border-green-500 focus:outline-none"
            >
              <option value="All">All Severities</option>
              <option value="Critical">Critical</option>
              <option value="High">High</option>
              <option value="Medium">Medium</option>
              <option value="Low">Low</option>
            </select>

            <select
              value={selectedPlatform}
              onChange={(e) => setSelectedPlatform(e.target.value)}
              className="px-4 py-2 bg-gray-900 border border-gray-600 rounded-lg text-gray-300 focus:border-green-500 focus:outline-none"
            >
              <option value="All">All Platforms</option>
              <option value="Windows">Windows</option>
              <option value="Linux">Linux</option>
              <option value="macOS">macOS</option>
            </select>
          </div>
        </div>
      </div>

      {/* Exploits Grid */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
        {filteredExploits.map((exploit) => (
          <div
            key={exploit.id}
            className="bg-gray-800 border border-gray-700 rounded-lg p-6 hover:border-green-500/50 transition-all duration-200 cursor-pointer"
            onClick={() => handleExploitSelect(exploit)}
          >
            {/* Header */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-2">
                  <h3 className="text-lg font-semibold text-green-400">{exploit.name}</h3>
                  {exploit.verified && (
                    <CheckCircle className="w-4 h-4 text-blue-400" title="Verified Exploit" />
                  )}
                </div>
                <div className="flex items-center space-x-3 mb-2">
                  <span className="font-mono text-sm text-blue-400">{exploit.cve}</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium border ${getSeverityColor(exploit.severity)}`}>
                    {exploit.severity}
                  </span>
                </div>
              </div>
              <div className="flex items-center space-x-1">
                <Star className="w-4 h-4 text-yellow-400 fill-current" />
                <span className="text-sm text-gray-300">{exploit.rating}</span>
              </div>
            </div>

            {/* Description */}
            <p className="text-gray-300 text-sm mb-4 leading-relaxed">
              {exploit.description}
            </p>

            {/* Metadata */}
            <div className="space-y-3 mb-4">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Platforms:</span>
                <div className="flex space-x-1">
                  {exploit.platforms.map((platform, index) => (
                    <span key={index} className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs">
                      {platform}
                    </span>
                  ))}
                </div>
              </div>

              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Services:</span>
                <div className="flex space-x-1">
                  {exploit.services.map((service, index) => (
                    <span key={index} className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs">
                      {service}
                    </span>
                  ))}
                </div>
              </div>

              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Difficulty:</span>
                <span className={`font-medium ${getDifficultyColor(exploit.difficulty)}`}>
                  {exploit.difficulty}
                </span>
              </div>

              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Reliability:</span>
                <span className={`font-medium ${getReliabilityColor(exploit.reliability)}`}>
                  {exploit.reliability}
                </span>
              </div>

              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Potential Targets:</span>
                <span className="text-green-400 font-medium">{exploit.targets}</span>
              </div>
            </div>

            {/* Actions */}
            <div className="flex items-center justify-between pt-4 border-t border-gray-700">
              <span className="text-xs text-gray-500">by {exploit.author}</span>
              <div className="flex space-x-2">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleExploitSelect(exploit);
                  }}
                  className="flex items-center space-x-2 px-3 py-1 bg-blue-500/20 text-blue-400 rounded hover:bg-blue-500/30 transition-colors text-sm"
                >
                  <Info className="w-4 h-4" />
                  <span>Details</span>
                </button>
                <button
                  disabled={isRunning}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleRunExploit(exploit);
                  }}
                  className="flex items-center space-x-2 px-3 py-1 bg-green-500/20 text-green-400 rounded hover:bg-green-500/30 transition-colors text-sm"
                >
                  <Play className="w-4 h-4" />
                  <span>Run</span>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Results Summary */}
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-4">
        <div className="flex items-center justify-between text-sm text-gray-400">
          <span>Showing {filteredExploits.length} of {exploits.length} exploits</span>
          <span>
            {filteredExploits.filter(e => e.severity === 'Critical').length} Critical • 
            {filteredExploits.filter(e => e.severity === 'High').length} High • 
            {filteredExploits.filter(e => e.verified).length} Verified
          </span>
        </div>
      </div>

      {/* Exploit Details Modal would go here */}
      {/* Exploit Details Modal */}
      {showDetails && selectedExploit && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-700 rounded-lg p-6 max-w-4xl w-full max-h-[80vh] overflow-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-green-400">{selectedExploit.name}</h2>
              <button
                onClick={() => setShowDetails(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="space-y-4 text-gray-300">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p><strong>CVE:</strong> {selectedExploit.cve}</p>
                  <p><strong>Severity:</strong> <span className={getSeverityColor(selectedExploit.severity).replace('bg-', 'text-')}>{selectedExploit.severity}</span></p>
                  <p><strong>Difficulty:</strong> <span className={getDifficultyColor(selectedExploit.difficulty)}>{selectedExploit.difficulty}</span></p>
                  <p><strong>Reliability:</strong> <span className={getReliabilityColor(selectedExploit.reliability)}>{selectedExploit.reliability}</span></p>
                </div>
                <div>
                  <p><strong>Author:</strong> {selectedExploit.author}</p>
                  <p><strong>Rating:</strong> {selectedExploit.rating}/5.0</p>
                  <p><strong>Potential Targets:</strong> {selectedExploit.targets}</p>
                  <p><strong>Verified:</strong> {selectedExploit.verified ? 'Yes' : 'No'}</p>
                </div>
              </div>
              <div>
                <p><strong>Description:</strong></p>
                <p className="mt-2 p-3 bg-gray-900 rounded">{selectedExploit.description}</p>
              </div>
              <div>
                <p><strong>Platforms:</strong></p>
                <div className="flex space-x-2 mt-2">
                  {selectedExploit.platforms.map((platform, index) => (
                    <span key={index} className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-sm">
                      {platform}
                    </span>
                  ))}
                </div>
              </div>
              <div>
                <p><strong>Services:</strong></p>
                <div className="flex space-x-2 mt-2">
                  {selectedExploit.services.map((service, index) => (
                    <span key={index} className="bg-gray-700 text-gray-300 px-2 py-1 rounded text-sm">
                      {service}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Run Exploit Dialog */}
      {showRunDialog && selectedExploit && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-700 rounded-lg p-6 max-w-2xl w-full">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-green-400">Run Exploit: {selectedExploit.name}</h2>
              <button
                onClick={() => setShowRunDialog(false)}
                className="text-gray-400 hover:text-white"
                disabled={isRunning}
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="w-4 h-4 text-yellow-400" />
                  <p className="text-yellow-400 text-sm">Ensure you have explicit authorization before running this exploit.</p>
                </div>
              </div>
              
              <div className="space-y-3">
                <h3 className="text-lg font-semibold text-gray-300">Exploit Options</h3>
                
                {Object.entries(exploitOptions).map(([key, value]) => (
                  <div key={key}>
                    <label className="block text-sm font-medium text-gray-400 mb-1">
                      {key} {key.includes('HOST') || key === 'TARGETURI' ? '(Required)' : ''}
                    </label>
                    <input
                      type={typeof value === 'number' ? 'number' : 'text'}
                      value={value}
                      onChange={(e) => setExploitOptions(prev => ({
                        ...prev,
                        [key]: typeof value === 'number' ? parseInt(e.target.value) || 0 : e.target.value
                      }))}
                      className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-gray-300 focus:border-green-500 focus:outline-none"
                      placeholder={`Enter ${key.toLowerCase()}`}
                      disabled={isRunning}
                    />
                  </div>
                ))}
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={executeExploit}
                  disabled={isRunning || !exploitOptions.RHOSTS}
                  className="flex-1 flex items-center justify-center space-x-2 px-4 py-3 bg-red-500/20 text-red-400 border border-red-500/50 rounded-lg hover:bg-red-500/30 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isRunning ? (
                    <>
                      <div className="w-4 h-4 border-2 border-red-400 border-t-transparent rounded-full animate-spin"></div>
                      <span>Running...</span>
                    </>
                  ) : (
                    <>
                      <Target className="w-4 h-4" />
                      <span>Execute Exploit</span>
                    </>
                  )}
                </button>
                <button
                  onClick={() => setShowRunDialog(false)}
                  disabled={isRunning}
                  className="px-4 py-3 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600 transition-colors disabled:opacity-50"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExploitManager;