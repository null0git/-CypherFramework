"""
Base Post-Exploitation Module Template
All post-exploitation modules should inherit from this base class.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)

class BasePostExploit(ABC):
    """Base class for all post-exploitation modules."""
    
    # Module metadata
    name = "Unknown Post-Exploit"
    description = "Base post-exploitation template"
    author = "Unknown"
    version = "1.0"
    module_type = "post_exploit"
    
    # Post-exploit specific metadata
    platforms = []  # windows, linux, macos, android
    session_types = []  # shell, meterpreter, etc.
    
    def __init__(self):
        self.options = self._default_options()
        self.required_options = self._required_options()
        
    @abstractmethod
    def _default_options(self) -> Dict[str, Any]:
        """Return default options for this post-exploit module."""
        return {
            'SESSION': {'value': '', 'required': True, 'description': 'Session ID'},
        }
        
    @abstractmethod
    def _required_options(self) -> List[str]:
        """Return list of required option names."""
        return ['SESSION']
        
    @abstractmethod
    async def run(self, session: Any) -> Dict[str, Any]:
        """
        Execute the post-exploitation module.
        
        Args:
            session: Active session object
            
        Returns:
            Dict with results
        """
        pass
        
    def set_option(self, name: str, value: Any):
        """Set an option value."""
        if name in self.options:
            self.options[name]['value'] = value
        else:
            raise ValueError(f"Unknown option: {name}")
            
    def get_option(self, name: str) -> Any:
        """Get an option value."""
        if name in self.options:
            return self.options[name]['value']
        raise ValueError(f"Unknown option: {name}")
        
    def get_info(self) -> Dict[str, Any]:
        """Get post-exploit module information."""
        return {
            'name': self.name,
            'description': self.description,
            'author': self.author,
            'version': self.version,
            'platforms': self.platforms,
            'session_types': self.session_types,
            'options': self.options
        }
        
    async def _execute_command(self, session: Any, command: str) -> str:
        """Helper to execute command on session."""
        try:
            result = await session.execute(command)
            return result.get('output', '')
        except Exception as e:
            logger.error(f"Command execution failed: {e}")
            return f"Error: {e}"